using System;
using System.Configuration;
using System.Web;
using GolfBox.Framework.OnlinePayment;
using GolfBox.Framework.OnlinePayment.Enums;
using GolfBox.OnlinePayment;

namespace Handlers
{
    public class InitOrder : IHttpHandler
    {
        public void ProcessRequest(HttpContext context)
        {
            HttpRequest request   = context.Request;
            HttpResponse response = context.Response;

            int paymentId = Helper.IntTryParse(request["paymentId"], -1);
            Log<string> log = new Log<string>();
            log.PaymentID = paymentId;

            Payment payment = Payment.Load(paymentId);

            if (payment == null)
            {
                string message = string.Format("Error: Payment does not exist ( {0} )", paymentId);

                log.Action = "Payment.InitOrder";
                log.SaveResponse(message);

                Helper.WriteHtml(response, message);
                return;
            }

            if (payment.State >= State.InitOrder)
            {
                // This step has already been initated
                Helper.RedirectToAwait(context, payment);
                return;
            }

            PaymentWrapper.SetPaymentState(payment, State.InitOrder, "InitOrder");

            try
            {
                log.SaveRequest("Payment.InitOrder");

                switch (payment.MerchantAgreement.Provider)
                {
                    case Provider.DIBS:
                        InitDIBSPaymentWindow(payment, response);
                        break;

                    case Provider.PayEx:
                        InitPayexPaymentWindow(payment, response);
                        break;

                    case Provider.PayPalExpressCheckout:
                        payment.Culture = request["culture"];
                        InitPayPalExpressCheckoutWindow(payment, response);
                        break;

                    case Provider.DIBSFlexWin:
                        payment.Culture = request["culture"];
                        InitDIBSFlexWinPaymentWindow(payment, response);
                        break;

                    case Provider.Paytrail:
                        payment.Culture = request["culture"];
                        InitPaytrailPaymentWindow(payment, response);
                        break;
                }

                log.SaveResponse("OK");
            }
            catch (Exception ex)
            {
                log.Action = "Payment.InitOrder";
                log.SaveResponse(string.Format("Exception: {0}, StackTrace: {1}", ex.Message, ex.StackTrace));

                payment.Save(); // Make sure the payment is saved so the Status of the payment is properly stored
                Helper.RedirectHtml(context, Helper.EditUrlQueryString(payment.Order.ClientErrorUrl, "msg", ex.Message), "Please wait...");
                return;
            }

            PaymentWrapper.SetPaymentState(payment, State.RedirectToProvider, "InitOrder");
        }

        private void InitDIBSPaymentWindow(Payment payment, HttpResponse response)
        {
            if (payment.Status == Status.Uninitialized)
            {
                InitPayment(payment, response);

                if (payment.Status != Status.Initialized)
                    return;
            }

            string url = ConfigurationManager.AppSettings["DIBS.Api.Url"];

            Helper.WriteForm(response, url, payment.Parameters);
        }

        private void InitDIBSFlexWinPaymentWindow(Payment payment, HttpResponse response)
        {
            if (payment.Status == Status.Uninitialized)
            {
                InitPayment(payment, response);

                if (payment.Status == Status.Authorized || payment.Status == Status.Captured)
                {
                    Helper.WriteTxt(response, Helper.ToJson(new { paymentId = payment.ID }));
                    return;
                }

                if (payment.Status == Status.Error)
                {
                    Helper.WriteTxt(response, Helper.ToJson(new { error = payment.Order["errorDescription"] }));
                    return;
                }

                if (payment.Status != Status.Initialized)
                    return;
            }

            string url = ConfigurationManager.AppSettings["DIBS.FlexWin.Api.Url"];

            Helper.WriteForm(response, url, payment.Parameters);
        }

        private void InitPayexPaymentWindow(Payment payment, HttpResponse response)
        {
            if (payment.Status == Status.Initialized)
            {
                response.Redirect(payment.Order.ProviderRedirectUrl, false);
                return;
            }

            InitPayment(payment, response);

            if (payment.Status != Status.Initialized)
                return;

            response.Redirect(payment.Order.ProviderRedirectUrl, false);
        }

        private void InitPayPalExpressCheckoutWindow(Payment payment, HttpResponse response)
        {
            if (payment.Status == Status.Uninitialized)
            {
                InitPayment(payment, response);

                if (payment.Status != Status.Initialized)
                    return;
            }

            string url = payment.Order.ProviderRedirectUrl;

            response.Redirect(url, false);
        }

        private void InitPaytrailPaymentWindow(Payment payment, HttpResponse response)
        {
            if (payment.Status == Status.Uninitialized)
            {
                InitPayment(payment, response);

                if (payment.Status != Status.Initialized)
                    return;
            }

            string url = ConfigurationManager.AppSettings["Paytrail.Api.Url"];

            Helper.WriteForm(response, url, payment.Parameters);
        }

        private void InitPayment(Payment payment, HttpResponse response)
        {
            payment.Request();
            payment.Save();
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}