using System.Web;
using GolfBox.OnlinePayment;
using System;
using System.Collections.Generic;

namespace Handlers
{
    public class ProcessIncompleteTransactions: IHttpHandler
    {
        public void ProcessRequest(HttpContext context)
        {
            HttpRequest request = context.Request;

            List<GolfBox.Framework.OnlinePayment.Payment> payments = GolfBox.Framework.OnlinePayment.Payment.ListByStatusMismatch();

            if (payments != null)
            {
                foreach (GolfBox.Framework.OnlinePayment.Payment payment in payments)
                {
                    GolfBox.Framework.OnlinePayment.Log<string> log = new GolfBox.Framework.OnlinePayment.Log<string>();
                    log.PaymentID = payment.ID;
                    log.SaveRequest("Payment.ProcessIncompleteTransactions");

                    GolfBox.Framework.OnlinePayment.Enums.Status lastValidStatus = payment.Status;

                    try
                    {
                        if (payment.Status == GolfBox.Framework.OnlinePayment.Enums.Status.Authorized && payment.InstantCapture)
                        {
                            PaymentWrapper.CapturePayment(payment);
                            lastValidStatus = payment.Status;
                        }

                        if ((payment.Status == GolfBox.Framework.OnlinePayment.Enums.Status.Authorized ||
                            payment.Status == GolfBox.Framework.OnlinePayment.Enums.Status.Captured) &&
                            payment.ClientStatus != payment.Status)
                        {
                            PaymentWrapper.GetClientResponse(payment,"incomplete");
                        }
                    }
                    catch (Exception ex)
                    {
                        log.SaveResponse(string.Format("Exception: {0}, StackTrace: {1}", ex.Message, ex.StackTrace));
                        return;
                    }
                }
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}