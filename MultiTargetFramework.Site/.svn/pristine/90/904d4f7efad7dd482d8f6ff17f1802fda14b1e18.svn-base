namespace Handlers
{
	using System;
	using System.Web;
    using GolfBox.OnlinePayment;
    using GolfBox.Framework.OnlinePayment;

	public class CancelOrder : IHttpHandler
	{
		public bool IsReusable
		{
			get { return true; }
		}

		public void ProcessRequest(HttpContext context)
		{
			HttpRequest req = context.Request;
			HttpResponse res = context.Response;

			int paymentId = Helper.IntTryParse(req["paymentId"], -1);

            Log<string> log = new Log<string>();
            log.PaymentID = paymentId;
            log.SaveRequest("Payment.CancelOrder");

			GolfBox.Framework.OnlinePayment.Payment payment = GolfBox.Framework.OnlinePayment.Payment.Load(paymentId);

			if (payment == null)
			{
                string message = string.Format("Error: Payment does not exist ({0})", paymentId);
                log.SaveResponse(message);

				Helper.WriteTxt(res, message);
				return;
			}

			try
			{
				payment.Cancel();
                payment.Save();

                log.SaveResponse(string.Format("Payment status: {0}", payment.Status.ToString()));
			}
			catch (Exception ex)
			{
                log.SaveResponse(string.Format("Exception: {0}, StackTrace: {1}", ex.Message, ex.StackTrace));
                Helper.WriteTxt(res, "Error: " + ex.Message);
                return;
			}

			Helper.WriteTxt(res, "Cancelled");	
		}
	}
}